# Tmux 3.2+ Configuration

DISABLE_AUTO_TITLE="true"

################################################################################
# ENVIRONMENT VARIABLES
################################################################################
# if-shell 'test -z $TMUX_LOGS' {
#   set-environment -g TMUX_LOGS "$HOME/.config/tmux/logs"
# }

################################################################################
# SETTINGS
################################################################################
# set-option -g default-shell    $SHELL
set-option -g default-command  $SHELL
set-option -g default-terminal "tmux-256color"

# Support TrueColor
set-option -ga terminal-overrides ",*-256color:RGB,alacritty:RGB"

set-option -ga update-environment "ITERM_PROFILE TERM_PROFILE TERM_PROGRAM LC_TERMINAL FZF_DEFAULT_OPTS ZERO_VIM_PROFILE ZERO_VIM_TRANSPARENT_BACKGROUND"

set-option -gs escape-time     0
set-option -g  repeat-time     300
set-option -g  focus-events    on
set-option -g  visual-activity on
set-option -g  history-limit   100000

set-option -g base-index      1
set-option -g renumber-window on
set-option -g mouse           on

# emacs key bindings in tmux command prompt (prefix + :) are better than vi keys, even for vim users
set-option -g status-keys emacs

# set-option -g set-titles on
# set-option -g set-titles-string "#S ❐ #I:#W ● #T"

# focus events enabled for terminals that support them
# set-option -g focus-events on

set-window-option -g aggressive-resize on
set-window-option -g monitor-activity  on
set-window-option -g xterm-keys        on
set-window-option -g mode-keys         vi
set-window-option -g pane-base-index   1

################################################################################
# STATUS LINE
################################################################################
set-option -g status          on
set-option -g status-interval 20
set-option -g status-justify  centre

set-option -g status-style       ""
set-option -g status-left-style  ""
set-option -g status-left-length 40
set-option -g status-right-style ""

set-option -g status-style fg=white,bg=black
set-option -g status-left  "#[fg=green][#S] #[fg=yellow]W: #I #[fg=cyan]P: #P#{?pane_synchronized, @,} #{?client_prefix,##, } "
set-option -g status-right "#[fg=cyan]%a %b %-d, %Y %R"

set-window-option -g window-status-style         fg=cyan,bg=default,dim
set-window-option -g window-status-current-style fg=white,bg=red,bright

set-window-option -g window-status-format         " #I:#W#F "
set-window-option -g window-status-current-format " #I:#W#F "

set-option -g pane-border-style        fg=green,bg=black
set-option -g pane-active-border-style fg=white,bg=blue

set-option -g message-style fg=white,bg=black,bright

################################################################################
# KEY BINDINGS
################################################################################
unbind-key C-b

set-option -g prefix C-Space
# bind-key C-Space send-prefix
bind-key -r C-Space last-window

bind-key R source-file ~/.config/tmux/tmux.conf \; display-message "Reloaded ~/.config/tmux/tmux.conf!"

bind-key 0 send-keys C-u C-l C-u \; run-shell "sleep .1s" \; clear-history \; display-message "Cleared history!"

bind-key C-d detach-client

bind-key -r (   switch-client -p
bind-key -r )   switch-client -n
bind-key -r C-s switch-client -l

bind-key C-q confirm-before -p "kill-session #S? (y/n)"   kill-session
bind-key C-x confirm-before -p "kill-window #I:#W? (y/n)" kill-window

bind-key C-w choose-tree -Zw

bind-key C new-window -c "#{pane_current_path}"

bind-key C-\\ split-window -h
bind-key C-_  split-window -v

bind-key | split-window -h -c "#{pane_current_path}"
bind-key _ split-window -v -c "#{pane_current_path}"

bind-key F command-prompt -p "(find-window -NT):" "find-window -NT '%%'"

bind-key -r C-h select-window -t :-
bind-key -r C-l select-window -t :+
bind-key -r C-p previous-window
bind-key -r C-n next-window

bind-key -r P swap-window -d -t :-
bind-key -r N swap-window -d -t :+

bind-key -r o   if-shell "test #{window_zoomed_flag} -eq 1" "select-pane -t :.+ ; resize-pane -Z" "select-pane -t :.+"
bind-key -r O   if-shell "test #{window_zoomed_flag} -eq 1" "select-pane -t :.- ; resize-pane -Z" "select-pane -t :.-"
bind-key -r C-o if-shell "test #{window_zoomed_flag} -eq 1" "select-pane -t :.+ ; resize-pane -Z" "rotate-window"

bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

bind-key -r H resize-pane -L 5
bind-key -r J resize-pane -D 5
bind-key -r K resize-pane -U 5
bind-key -r L resize-pane -R 5

bind-key Enter resize-pane -Z

bind-key "@" choose-tree -Zw "join-pane -t '%%'"

bind-key : command-prompt -p "tmux:"

bind-key C-r command-prompt -p "(new-window -c #{pane_current_path}) command:" "new-window -c '#{pane_current_path}' -n '%1' '%%'"

bind-key C-i command-prompt -p "(split-window -h):" -I "man " "split-window -h '%%'"
bind-key I   command-prompt -p "(new-window):"      -I "man " "new-window -n '%1' '%%'"

bind-key ` new-window -n top top
if-shell 'which htop' 'bind-key ` new-window -n htop htop'

bind-key C-g run-shell -b "cd #{pane_current_path}; git gui"
bind-key C-k run-shell -b "cd #{pane_current_path}; gitk"

bind-key T   new-window -c "#{pane_current_path}" -n tig "tig"
bind-key C-t new-window -c "#{pane_current_path}" -n tig "tig status"

bind-key g new-window -c "#{pane_current_path}" -n gitui "gitui"
bind-key G new-window -c "#{pane_current_path}" -n lazygit "lazygit"

bind-key C-u capture-pane -J -S -50 -b urlview \; new-window -n urlview "tmux save-buffer -b urlview - | urlview ; tmux delete-buffer -b urlview"
if-shell 'which direnv' 'bind-key C-u capture-pane -J -S -50 -b urlview \; new-window -n urlview -c "#{pane_current_path}" "tmux save-buffer -b urlview - | direnv exec . urlview ; tmux delete-buffer -b urlview"'

bind-key C-f capture-pane -J -S -50 -b fpp \; new-window -n fpp -c "#{pane_current_path}" "tmux save-buffer -b fpp - | fpp ; tmux delete-buffer -b fpp"

bind-key C-b command-prompt -p "(new-window) w3m:" -I "google.com" "new-window -n w3m 'w3m %%'"

bind-key Y pipe-pane -o "cat >> ~/.config/tmux/logs/%F-%H-%M-%S-%p-#S-#I-#P.out" \; display-message "Toggled logging to ~/.config/tmux/logs/%F-%H-%M-%S-%p-#S-#I-#P.out!"

bind-key * command-prompt -p "capture all lines with escape sequences:" -I "~/.config/tmux/logs/%F-%H-%M-%S-%p-#S-#I-#P.log" "capture-pane -e -J -S- ; save-buffer %%"
bind-key > command-prompt -p "capture all lines:" -I "~/.config/tmux/logs/%F-%H-%M-%S-%p-#S-#I-#P.txt" "capture-pane -J -S- ; save-buffer %%"
bind-key < command-prompt -p "capture visible lines:" -I "~/.config/tmux/logs/%F-%H-%M-%S-%p-#S-#I-#P.txt" "capture-pane -J ; save-buffer %%"

bind-key b choose-buffer -Z "show-buffer -b '%%'"

bind-key Escape copy-mode
bind-key y      copy-mode
bind-key C-y    copy-mode
bind-key v      paste-buffer
bind-key C-v    paste-buffer

bind-key -T root WheelUpPane if-shell -Ft= "#{?pane_in_mode,1,#{alternate_on}}" "send-keys -M" "copy-mode -e"

bind-key -T copy-mode-vi s   send-keys -X begin-selection
bind-key -T copy-mode-vi C-w send-keys -X select-word
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle

################################################################################
# CLIPBOARD SETTINGS & KEY BINDINGS
################################################################################
if-shell 'which pbcopy 2>/dev/null' {
  bind-key + choose-buffer -Z "run-shell \"tmux save-buffer -b '%%' - | pbcopy\""
  bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy" bind-key -T copy-mode-vi Y send-keys Escape 0 Space $ b e \; send-keys -X copy-pipe-and-cancel "pbcopy"
  bind-key -T copy-mode-vi p send-keys Escape H Space L b e \; send-keys -X copy-pipe-and-cancel "pbcopy"
  bind-key -T copy-mode-vi P send-keys Escape g Space G b e \; send-keys -X copy-pipe-and-cancel "pbcopy"
} {
  if-shell 'which wl-copy 2>/dev/null' {
    bind-key + choose-buffer -Z "run-shell \"tmux save-buffer -b '%%' - | wl-copy\""
    bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "wl-copy"
    bind-key -T copy-mode-vi Y send-keys Escape 0 Space $ b e \; send-keys -X copy-pipe-and-cancel "wl-copy"
    bind-key -T copy-mode-vi p send-keys Escape H Space L b e \; send-keys -X copy-pipe-and-cancel "wl-copy"
    bind-key -T copy-mode-vi P send-keys Escape g Space G b e \; send-keys -X copy-pipe-and-cancel "wl-copy"
  } {
    if-shell 'which xsel 2>/dev/null' {
      bind-key + choose-buffer -Z "run-shell \"tmux save-buffer -b '%%' - | xsel -i --primary\""
      bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xsel -i --primary"
      bind-key -T copy-mode-vi Y send-keys Escape 0 Space $ b e \; send-keys -X copy-pipe-and-cancel "xsel -i --primary"
      bind-key -T copy-mode-vi p send-keys Escape H Space L b e \; send-keys -X copy-pipe-and-cancel "xsel -i --primary"
      bind-key -T copy-mode-vi P send-keys Escape g Space G b e \; send-keys -X copy-pipe-and-cancel "xsel -i --primary"
    } {
      if-shell 'which xclip 2>/dev/null' {
        bind-key + choose-buffer -Z "run-shell \"tmux save-buffer -b '%%' - | xclip -i -selection primary\""
        bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -i -selection primary"
        bind-key -T copy-mode-vi Y send-keys Escape 0 Space $ b e \; send-keys -X copy-pipe-and-cancel "xclip -i -selection primary"
        bind-key -T copy-mode-vi p send-keys Escape H Space L b e \; send-keys -X copy-pipe-and-cancel "xclip -i -selection primary"
        bind-key -T copy-mode-vi P send-keys Escape g Space G b e \; send-keys -X copy-pipe-and-cancel "xclip -i -selection primary"
      }
    }
  }
}

################################################################################
# THEMES
################################################################################
run-shell "$HOME/.dotfiles/config/tmux/theme.sh"

################################################################################
# LOCAL / USER CONFIG
################################################################################
run-shell "$HOME/.dotfiles/config/tmux/local.sh"
